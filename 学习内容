一，

事件event 

在谷歌浏览器的开发者工具中，有一个Console(控制台)
可以在这里查看代码错误，红字就是错误

js代码的编写位置：
第一个位置：和css内联的位置一样
例如：
<button id="btn" onclick="alert('我被点击了！')">点我</button>
第二个位置：写在body结束标签的上面
用<script>标签
第三个位置：写在单独的js文件里
在html中声明它的路径

在js中变量名定义区分大小写，小写和大写不一样
同样的变量名也区分大小写

如果想把语句放到一行，必须用分号相隔，不然会报错
至于为什么要把代码放到一行？
因为就连一个空格 一个回车都是占空间的 为了提高网页加载速度 会采用这种放在一行的方式
当每一条语句不在同一行，正常js不加分号也不报错，但是建议加上

注释：
单行注释：
//
多行注释：
/*
 *
 */
文档注释：(用来做函数的注释，直接在函数上方/**敲回车就可以)(java中也有这个注释)
/**
 *
 *@param
 */
param 为 parameter 的简写 ，这个单词为参数的意思
例如：
/**
 * 这是一个演示函数
 * @param {string} name 用户姓名
 * @param {number} age  用户年龄
 */
function test(name,age){

}
{}里面的内容可以写参数类型

二，

变量
基本的注意事项和写法都和C语言差不多

变量名的命名规则：
名称可包含字母，数字，下划线和美元符号
名称必须以字母开头
名称也可以 $ 和 _ 开头(但是在本教程中我们不会这么做)
名称对大小写敏感(y和Y是不同的变量)
保留字(比如JavaScript的关键字)无法用作变量名称

var = variable（可变的） 变量的意思
定义的时候直接用var就可以定义所有类型

变量命名规范：
驼峰式：首字母小写，接下来的字母都以大写字母开头。
例如：myTestValue
Pascal 标记法： 首字母是大写的，接下来的字母都是大写的
例如：MyTestValue
匈牙利式：在以Pascal命名的基础上，变量前加一个小写字母，说明该变量的类型
例如：i表示整数 iMyTestValue
如下表：
类型                           前缀
数组                            a
布尔型                          b
浮点型(数字)                    f 
函数                           fn 
整形(数字)                      i 
对象                            o 
正则表达式                      re
字符串                          s 
变型(可以是任何类型)             v 

ECMAScript 原始类型：
有5种：即Undefined,Null,Boolean,Number和String

三，

对象(Object)       一切皆对象
特征+行为 = 属性+方法 = 对象

面向对象的三大特征：
Object-Oriented Analysis(OOA)  面向对象的分析
Object-Oriented Design(OOD)  面向对象的设计
Object-Oriented Programming(OOP)  面向对象的编程

this只能在当前指向的方法中使用
自己定义的变量可以在任何位置使用

数组(Array)
数组中比较常见的方法：
push();     在数组的最后面增加一个值,并返回新的长度
pop();      删除并返回数组的最后一个元素
unshift();  在数组的最前面增加一个值,并返回新的长度
shift();    删除并返回数组的第一个元素
splice();   删除元素，并向数组添加新元素
以上这些是常用的，还有很多，通过借鉴手册

四，

通过HTML DOM ,JavaScript 能够访问和改变 HTML 文档的所有元素
DOM(Document Object Model) (文档 对象 类型)
利用 js 把HTML中的元素和 css 样式当成对象来处理，来完成交互的过程

三种对象：
1.内置对象
已经给提供好了，直接用就可以了
2.自定义对象
自己创建的对象
3.dom 对象
指的是网页中 html 的标签 和 css 的样式

对象的 HTML DOM 树
在dom树的概念中，元素也叫做节点

五，

innerHTML是一个双向属性，既能修改值，也能获取值

dom属性其实有两种:
其中一种是存在内存中
其中一种是存在dom中
<h1 id="h1" class="bb" aa="bb">我是标题</h1>
对于id ,class 这种html自带的dom属性可以,通过  .id   进行操作
但是像 aa 这种自定义的dom属性 要通过类似于.getAttribute();和.setAttribute();的方式操作
但是在IE浏览器中,自定义的dom属性也可以通过 直接.的方式,不需要get 和 set 
但是还是要用get 和set ,不用管什么IE浏览器
那这两个属性有什么区别吗?
像id和class属性这种,必须先<h1 id="h1" class="bb">我是标题</h1>  像这样声明,后面才可以用
而自定义的随时添加随时用  比如:直接在JS中直接写 h1.cc = "dd";就声明出了cc这样的自定义属性 不需要写在h1标签里

全局变量和局部变量:
当在函数中用var声明一个变量,那它就是局部的;
不用var声明就是全局的,和在函数外用var 声明的全局变量一样

六，

事件驱动：
在网页中所有的交互都是事件驱动的
不管在网页中想执行什么操作(比如点击操作产生的交互)，都需要先绑定一个事件
需要在事件处理函数中完成想要完成的操作

addEventListener();  添加一个事件监听器  IE8(包含IE8)之前的浏览器是不支持的
如果在IE8之前中，需要用到另一个语法:
btn.attachEvent('onlick',function(){
            
});
只有两个参数

因为会存在浏览器不兼容的问题，方法在不同的浏览器中不一定都好使，
所以应该先用if判断浏览器中，是否存在这个方法如果存在，才调用
例如：
if(btn.addEventListener){

}

attachEvent();的问题：
不支持事件的捕获(true)
绑this时会出现问题
执行顺序也有问题

函数的两种写法：
function test(){

}
var test = function(){

};
这两个是等价的

btn.onclick在所有浏览器中都支持，存在的问题是，不能多次绑定

七，

常用事件：
单击事件：
onclick   当用户点击某个对象时调用的事件句柄
键盘事件：
onkeydown   某个键盘按键被按下
onkeypress  某个键盘按键被按下并松开
onkeyup     某个键盘按键被松开
想要判断用户输入了哪些字符就用onkeyup ，判断用户按了哪个键就用onkeydown
鼠标事件：
onmousedown       当按下鼠标时
onmouseup         当松开鼠标时
onmousemove       当鼠标移动时
onmouseover       当鼠标划入时
onmouseout        当鼠标划出时

事件，事件处理函数，事件对象
例如：
var btn = document.getElementById('btn');
btn.onclick = function(e){
     console.log(e.type);
};
其中，
事件为onclick
事件处理函数为function(){   };
事件对象为 btn
也就可以通过e下面的一些事件属性来完成一些操作

事件冒泡：从内到外   从下到上
事件捕获：从外到内   从上到下
先捕获后冒泡
捕获用的非常少，冒泡比较重要

事件代理(委托)：
利用事件冒泡来用 父 来处理 子 的事情











